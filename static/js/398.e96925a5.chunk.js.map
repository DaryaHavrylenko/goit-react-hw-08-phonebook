{"version":3,"file":"static/js/398.e96925a5.chunk.js","mappings":"4NAAaA,EAAa,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAElBC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAEjBC,EAAe,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,qECMpBC,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMX,GAAWY,EAAAA,EAAAA,IAAYd,GAEvBe,GAAWC,EAAAA,EAAAA,MAkBXC,EAAe,SAAAC,GACnB,OAAQA,EAAEC,OAAOT,MACf,IAAK,OACHC,EAAQO,EAAEC,OAAOC,OACjB,MACF,IAAK,SACHP,EAAUK,EAAEC,OAAOC,OACnB,MACF,QACEC,QAAQC,IAAI,6BAEjB,EAEKC,GAAUC,EAAAA,EAAAA,MACVC,GAAWD,EAAAA,EAAAA,MAEjB,OACE,kBAAME,aAAa,MAAMC,SAjCN,SAAAT,GACnBA,EAAEU,iBACF,IAAMC,EAAcnB,EAAKoB,cAEnBC,EAAgB7B,EAAS8B,MAC7B,SAAAC,GAAO,OAAIA,EAAQvB,KAAKoB,gBAAkBD,CAAnC,IAGTE,EACIG,MAAM,GAAD,OAAIxB,EAAJ,4BACLK,GAASoB,EAAAA,EAAAA,IAAW,CAAEzB,KAAAA,EAAME,OAAAA,EAAQwB,IAAIZ,EAAAA,EAAAA,SACvCO,IACHpB,EAAQ,IACRE,EAAU,IAEb,EAkBC,WACE,SAAC,IAAD,CAAWwB,QAASd,EAApB,mBACA,SAAC,EAAAe,EAAD,CACEC,KAAK,OACL7B,KAAK,OACL8B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAU1B,EACVG,MAAOV,EACP0B,GAAIb,EACJqB,iBAAiB,aAEnB,SAAC,IAAD,CAAWP,QAASZ,EAApB,qBACA,SAAC,EAAAa,EAAD,CACEC,KAAK,MACL7B,KAAK,SACL8B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAU1B,EACVG,MAAOR,EACPwB,GAAIX,EACJmB,iBAAiB,aAEnB,SAAC,IAAD,CAAQL,KAAK,SAASM,GAAG,IAAIC,QAAQ,UAAUC,YAAY,OAA3D,2BAKL,E,oBCxEYC,EAAW,WACtB,IAAMjC,GAAWC,EAAAA,EAAAA,MACXd,GAAWY,EAAAA,EAAAA,IAAYd,GAGvBiD,GADSnC,EAAAA,EAAAA,IAAYV,GACD0B,cACpBoB,EAAoBhD,EAASG,QAAO,SAAA4B,GAAO,OAC/CA,EAAQvB,KAAKoB,cAAcqB,SAASF,EADW,IAIjD,OACE,SAAC,KAAD,UACGC,EAAkBE,KAAI,gBAAGhB,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACrB,UAAC,KAAD,YACE,yBACGF,EADH,KACWE,MAEX,SAAC,IAAD,CACEyC,MAAM,UACNP,QAAQ,UACRQ,QAAS,WACPvC,GAASwC,EAAAA,EAAAA,IAAcnB,GACxB,EALH,UAOE,SAAC,MAAD,CAAiBoB,KAAK,eAXXpB,EADM,KAkB5B,E,UC/BYqB,EAAS,WACpB,IAAM1C,GAAWC,EAAAA,EAAAA,MACXX,GAASS,EAAAA,EAAAA,IAAYV,GAK3B,OACE,iCACE,SAAC,IAAD,qCACA,SAAC,EAAAkC,EAAD,CACEoB,EAAE,MACFnB,KAAK,OACL7B,KAAK,SACLU,MAAOf,EACPsC,SAXiB,SAAAzB,GACrB,OAAOH,GAAS4C,EAAAA,EAAAA,GAAczC,EAAEC,OAAOC,OACxC,EAUKwB,iBAAiB,cAIxB,E,SCjBc,SAASgB,IACtB,IAAM7C,GAAWC,EAAAA,EAAAA,MACXT,GAAYO,EAAAA,EAAAA,IAAYR,GAM9B,OAJAuD,EAAAA,EAAAA,YAAU,WACR9C,GAAS+C,EAAAA,EAAAA,MACV,GAAE,CAAC/C,KAGF,iCACE,SAACgD,EAAA,EAAD,WACE,gDAEF,SAAC,IAAD,CAAMC,eAAe,aAAaC,GAAG,KAArC,UACE,SAACzD,EAAD,OAGF,SAACiD,EAAD,KAEA,yBAAMlD,GAAa,4BAEnB,SAACyC,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/Form/Form.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","pages/ContactsList.js"],"sourcesContent":["export const getContact = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Input } from '@chakra-ui/react';\n//import { FormPhonebook, Label, Input, Button } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { getContact } from 'redux/contacts/selectors';\nimport { Button, FormLabel } from '@chakra-ui/react';\n//import styled from 'styled-components';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContact);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const correctName = name.toLowerCase();\n\n    const IsContactList = contacts.find(\n      contact => contact.name.toLowerCase() === correctName\n    );\n\n    IsContactList\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number, id: nanoid() }));\n    if (!IsContactList) {\n      setName('');\n      setNumber('');\n    }\n  };\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        console.log('Invalid subscription type');\n    }\n  };\n\n  const modelId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit}>\n      <FormLabel htmlFor={modelId}>Name</FormLabel>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n        value={name}\n        id={modelId}\n        focusBorderColor=\"#E9D8FD\"\n      />\n      <FormLabel htmlFor={numberId}>Number</FormLabel>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n        value={number}\n        id={numberId}\n        focusBorderColor=\"#E9D8FD\"\n      />\n      <Button type=\"submit\" mt=\"5\" variant=\"outline\" colorScheme=\"teal\">\n        Add contact\n      </Button>\n    </form>\n  );\n};\n// };\n","//import PropTypes from 'prop-types';\n//mport { List, Item, Text, Button } from './Contacts.styled';\nimport { Button, UnorderedList, ListItem } from '@chakra-ui/react';\nimport { getContact, getFilter } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { MdDeleteForever } from 'react-icons/md';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContact);\n\n  const filter = useSelector(getFilter);\n  const normFilter = filter.toLowerCase();\n  const filterContactList = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normFilter)\n  );\n\n  return (\n    <UnorderedList>\n      {filterContactList.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <Button\n            color=\"#F6AD55\"\n            variant=\"outline\"\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n          >\n            <MdDeleteForever size=\"1.5rem\" />\n          </Button>\n        </ListItem>\n      ))}\n    </UnorderedList>\n  );\n};\n\n// Contacts.propTypes = {\n//     contacts: PropTypes.arrayOf(PropTypes.object),\n\n// }\n","//import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n//import { Label, Input } from './Filter.styled';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport { filterContact } from '../../redux/contacts/filterSlice';\nimport { Input, FormLabel } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const getFilterValue = e => {\n    return dispatch(filterContact(e.target.value));\n  };\n  return (\n    <>\n      <FormLabel>Find contacts by name</FormLabel>\n      <Input\n        w=\"100\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={getFilterValue}\n        focusBorderColor=\"#E9D8FD\"\n      />\n    </>\n  );\n};\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { getIsLoading } from '../redux/contacts/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { Form } from '../components/Form/Form';\nimport { Contacts } from '../components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\nimport { Flex } from '@chakra-ui/react';\n\nexport default function ContactsList() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Flex justifyContent=\"flex-start\" py=\"10\">\n        <Form />\n      </Flex>\n\n      <Filter />\n\n      <div>{isLoading && 'Request in progress...'}</div>\n\n      <Contacts />\n    </>\n  );\n}\n"],"names":["getContact","state","contacts","items","getFilter","filter","getIsLoading","isLoading","Form","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","console","log","modelId","nanoid","numberId","autoComplete","onSubmit","preventDefault","correctName","toLowerCase","IsContactList","find","contact","alert","addContact","id","htmlFor","I","type","pattern","title","required","onChange","focusBorderColor","mt","variant","colorScheme","Contacts","normFilter","filterContactList","includes","map","color","onClick","deleteContact","size","Filter","w","filterContact","ContactsList","useEffect","fetchContacts","Helmet","justifyContent","py"],"sourceRoot":""}